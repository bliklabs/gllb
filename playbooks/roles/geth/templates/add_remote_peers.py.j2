#!/usr/bin/env python3


import requests
import time
import argparse


port = "{{ port.http | default(port.http) }}"
local_ip = "{{ ansible_default_ipv4.address }}"
default_ips = [ {% for ip in all_default_route_ips %}"{{ ip }}"{% if not loop.last %}, {% endif %}{% endfor %} ]


def get_enode_url(ip, port):
    url = f"http://{ip}:{port}"
    data = {
        "jsonrpc": "2.0",
        "method": "admin_nodeInfo",
        "params": [],
        "id": 1
    }
    response = requests.post(url, json=data)
    if response.status_code == 200:
        response_json = response.json()
        enode_url = response_json["result"]["enode"]
        print(enode_url)
        return enode_url
    else:
        print("Error:", response.status_code)
        return None


def add_peer(peer_enode):
    geth_url = f"http://{local_ip}:{port}"
    data = {
        "jsonrpc": "2.0",
        "method": "admin_addPeer",
        "params": [peer_enode],
        "id": 1
    }
    response = requests.post(geth_url, json=data)
    if response.status_code == 200:
        print(response.status_code)
        return response.json()
    else:
        print("Error:", response.status_code)
        return None


def main(seconds):
    local_ip = "{{ ansible_default_ipv4.address }}"
    port = "{{ port.http | default(port.http) }}"
    default_ips = [ {% for ip in all_default_route_ips %}"{{ ip }}"{% if not loop.last %}, {% endif %}{% endfor %} ]
    while True:
        # get remote enodes
        remote_enodes = []
        for ip in default_ips:
            if ip != local_ip:
                enode_url = get_enode_url(ip, port)
                if enode_url:
                    remote_enodes.append(enode_url)
        # add remote peers to local
        for enode in remote_enodes:
            print(f"Adding peer: {enode}")
            add_peer(enode)
        # poll every n seconds
        time.sleep(seconds)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--seconds", type=int, default=5, help="Interval in seconds for running the main action")
    args = parser.parse_args()
    main(args.seconds)
