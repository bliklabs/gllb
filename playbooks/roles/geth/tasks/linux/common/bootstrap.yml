---

- name: Create validators
  become: yes
  shell: |
    /usr/local/bin/lcli \
        generate-bootnode-enr \
        --ip "{{ ansible_default_ipv4.address }}" \
        --udp-port "{{ port.enr | default(port.enr) }}" \
        --tcp-port "{{ port.enr | default(port.enr) }}" \
        --genesis-fork-version "{{ genesis_fork_version | default(genesis_fork_version) }}" \
        --output-dir "{{ root_dir | default(root_dir) }}/ethereum/bootstrap_enr"
  when: enr is not defined

- name: Read ENR file content
  become: yes
  slurp:
    src: "{{ root_dir | default(root_dir) }}/ethereum/bootstrap_enr/enr.dat"
  register: enr_content
  when: enr is not defined

- name: Set ENR as fact
  set_fact:
    enr: "- {{ enr_content['content'] | b64decode | string }}"
    cacheable: yes
  when: enr is not defined

- name: Read file into blob
  become: yes
  slurp:
    src: "{{ root_dir | default(root_dir) }}/ethereum/bootstrap_enr/key"
  register: key_blob
  when: enr_key is not defined

- name: Save blob as fact
  set_fact:
    enr_key: "{{ key_blob['content'] }}"
    cacheable: yes
  when: enr_key is not defined

- name: Run bootnode command and set enode fact
  become: yes
  command: "bootnode -nodekeyhex 02fd74636e96a8ffac8e7b01b0de8dea94d6bcf4989513b38cf59eb32163ff91 --nat=extip:{{ ansible_default_ipv4.address }} -writeaddress"
  register: bootnode_output
  ignore_errors: true
  when: genesis_config is not defined

- set_fact:
    enode: "enode://{{ bootnode_output.stdout }}@{{ ansible_default_ipv4.address }}:30301"
    cacheable: yes
  when: genesis_config is not defined

- name: Run generate wallets
  command: "/usr/bin/env python3 {{ root_dir | default('root_dir') }}/tooling/bootstrap_wallet.py {{ wallets.num_total | default(wallets.num_total) }} {{ wallets.num_signers | default(wallets.num_signers) }} {{ root_dir | default(root_dir) }}"
  become: yes
  when: genesis_config is not defined

- name: Read wallet json file
  become: yes
  slurp:
    src: "{{ root_dir }}/privs/accounts.json"
  register: gen_wallets_content
  when: genesis_config is not defined

- name: Set gen_wallets fact
  set_fact:
    gen_wallets: "{{ gen_wallets_content.content | b64decode }}"
    concatenate_string: ""
    cacheable: true
  when: genesis_config is not defined

- name: Read keyfile and store contents as fact
  become: yes
  slurp:
    src: "{{ item.keyfile_path }}"
  register: keyfile_contents
  loop: "{{ gen_wallets }}"
  when: genesis_config is not defined

- name: Set fact for each keyfile content
  set_fact:
    keystore:
      "{{ keystore | default({}) | combine({item.item.address: item.content | b64decode | string}) }}"
    cacheable: true
  loop: "{{ keyfile_contents.results }}"
  loop_control:
    loop_var: item
  when: genesis_config is not defined

- name: Extract signer addresses and concatenate
  set_fact:
    concatenate_string: "{{ concatenate_string }}{{ item.address }}"
    cacheable: true
  loop: "{{ gen_wallets }}"
  when: item.type == 'signer' and genesis_config is not defined

- name: Generate genesis JSON
  become: yes
  template:
    src: genesis.json.j2
    dest: "{{ root_dir }}/genesis/genesis.json"
  vars:
    concatenate_string: ""
  when: genesis_config is not defined

- name: Read genesis JSON file
  become: yes
  slurp:
    src: "{{ root_dir }}/genesis/genesis.json"
  register: genesis_json_content
  when: genesis_config is not defined

- name: Set genesis_config fact
  set_fact:
    genesis_config: "{{ genesis_json_content.content | b64decode }}"
    cacheable: true
  when: genesis_config is not defined

...
